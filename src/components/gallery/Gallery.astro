---
import ImageComponent from '@/components/my_images/Image.astro';
import Warning from '@/components/warning_modal/Warning.astro';
import type { Image } from '@/lib/types/index';
import './gallery.css';

interface Props {
  images: Array<Image>;
}
const { images } = Astro.props;
---

<section class="m-auto max-w-7xl mb-12">
  <div class="title-container">
    <div class="py-10">GALER√çA</div>
  </div>

  <div
    class="w-fit mx-auto grid grid-cols-1 xl:grid-cols-4 lg:grid-cols-3 md:grid-cols-2 justify-items-center justify-center gap-y-5 gap-x-8"
    uk-lightbox="animation: slide"
  >
    {
      images.map((image: Image, key: number) => (
        <div
          class:list={[
            'w-72 relative',
            {
              'bg-white shadow-md rounded-xl duration-300 hover:scale-105 hover:shadow-xl':
                image.explicitContent === false
            }
          ]}
        >
          <a
            id={`image_${key}`}
            href={image.url}
            data-caption={`${image.alt}`}
            class:list={[
              {
                'explicit-image': image.explicitContent
              }
            ]}
          >
            <ImageComponent
              class={
                image.explicitContent
                  ? 'blurred-image w-80 h-80 rounded-xl'
                  : 'w-80 h-80 rounded-xl'
              }
              src={image.url}
              alt={image.alt}
            />
          </a>
          <div class={image.explicitContent ? 'button-container' : 'hidden'}>
            <button
              type="button"
              class="show-image rounded-full"
              data-image-id={`image_${key}`}
            >
              Ver imagen
            </button>
          </div>
        </div>
      ))
    }
  </div>
  <div class="modal-container hidden" uk-toggle="target: #modal-warning">
    <button type="button" class="hidden-input"></button>
  </div>
</section>
<Warning />

<script is:inline defer>
  document.addEventListener('DOMContentLoaded', () => {
    const openLightBox = (event) => {
      const imageId = event.target.getAttribute('data-image-id');
      const explicitImageLink = document.getElementById(imageId);
      if (explicitImageLink) {
        explicitImageLink.click();
      }
    };

    const hiddenInput = document.querySelector('.hidden-input');
    if (hiddenInput) {
      const event = new MouseEvent('click', {
        view: window,
        bubbles: true,
        cancelable: true
      });
      hiddenInput.dispatchEvent(event);
    }

    const showImageButtons = document.querySelectorAll('.show-image');
    showImageButtons.forEach((imageButton) => {
      imageButton.addEventListener('click', openLightBox);
    });

    document.querySelector('.back-btn').addEventListener('click', () => {
      location.replace('index.html');
    });
  });
</script>
